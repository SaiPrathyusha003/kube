# This workflow will build a Java project with Maven..
# For more information see: https://help.github.com/actions/language-and-framework-guides/building-and-testing-java-with-mavens



name: Deposits java Microservice workflow



on:
push:
branches: [ develop ]
#pull_request:
#branches: [ develop ]

#Allows you to run this workflow manually from the Actions tab
workflow_dispatch:

env:
CI: true



jobs:
sonarQubeTrigger:
name: SonarQube Trigger
runs-on: self-hosted
steps:
- uses: actions/checkout@v2
with:
fetch-depth: 0 # Shallow clones should be disabled for a better relevancy of analysis
- name: Set up JDK 8
uses: actions/setup-java@v1
with:
java-version: 8
- name: Cache SonarQube packages
uses: actions/cache@v1
with:
path: ~/.sonar/cache
key: ${{ runner.os }}-sonar
restore-keys: ${{ runner.os }}-sonar
- name: Cache Gradle packages
uses: actions/cache@v1
with:
path: ~/.gradle/caches
key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle') }}
restore-keys: ${{ runner.os }}-gradle
- name: Build and analyze
env:
SONAR_TOKEN: ${{ secrets.SONARQUBE_TOKEN }}
SONAR_HOST_URL: ${{ secrets.SONARQUBE_HOST }}
spring_datasource_url: ${{ secrets.DEV_SPRING_DATASOURCE_URL }}
spring_datasource_username: ${{ secrets.DEV_SPRING_DATASOURCE_USERNAME }}
spring_datasource_password: ${{ secrets.DEV_SPRING_DATASOURCE_PASSWORD }}
kafka_bootstrap_servers: "b-1.jewelkafka-dev.guzv65.c21.kafka.us-east-1.amazonaws.com:9092, b-2.jewelkafka-dev.guzv65.c21.kafka.us-east-1.amazonaws.com:9092"
kafka_audit_topic_user: ${{ secrets.kafka_audit_topic_user }}
kafka_audit_topic_sys: ${{ secrets.kafka_audit_topic_sys }}
kafka_audit_topic_event_txn: ${{ secrets.kafka_audit_topic_event_txn }}
logging_level_req_res_trace_deposits: ${{ secrets.logging_level_req_res_trace_deposits }}
logging_level_root: ${{ secrets.logging_level_root }}
run: |
echo "kafka bootstrap servers:$kafka_bootstrap_servers"
echo "kafka_audit_topic_user:$kafka_audit_topic_user"
echo "kafka_audit_topic_sys:$kafka_audit_topic_sys"
echo "kafka_audit_topic_event_txn:$kafka_audit_topic_event_txn"
echo "logging_level_req_res_trace_deposits:$logging_level_req_res_trace_deposits"
echo "logging_level_root:$logging_level_root"
chmod +x gradlew
./gradlew build sonarqube --info
CI:
name: build
runs-on: self-hosted
needs:
- sonarQubeTrigger
steps:
- uses: actions/checkout@v2
- name: Set up JDK 8
uses: actions/setup-java@v1
with:
java-version: 8
- name: Grant execute permission for gradlew
run: chmod +x gradlew
- name: Build with Gradle
env:
spring_datasource_url: ${{ secrets.DEV_SPRING_DATASOURCE_URL }}
spring_datasource_username: ${{ secrets.DEV_SPRING_DATASOURCE_USERNAME }}
spring_datasource_password: ${{ secrets.DEV_SPRING_DATASOURCE_PASSWORD }}
kafka_bootstrap_servers: ${{ secrets.kafka_bootstrap_servers }}
kafka_audit_topic_user: ${{ secrets.kafka_audit_topic_user }}
kafka_audit_topic_sys: ${{ secrets.kafka_audit_topic_sys }}
kafka_audit_topic_event_txn: ${{ secrets.kafka_audit_topic_event_txn }}
logging_level_req_res_trace_deposits: ${{ secrets.logging_level_req_res_trace_deposits }}
logging_level_root: ${{ secrets.logging_level_root }}
run: ./gradlew build

- name: Configure AWS credentials
uses: aws-actions/configure-aws-credentials@v1
with:
aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
aws-region: ${{ secrets.AWS_REGION }}

- name: Login to Amazon ECR
id: login-ecr
uses: aws-actions/amazon-ecr-login@v1

- name: Build and push the image
env:
ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
ECR_REPOSITORY: ${{ secrets.REPO_NAME }}
IMAGE_TAG: dev-0.${{ github.run_number }}.0
run: |
# Build a docker container and push it to ECR
docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
echo "Pushing image to ECR..."
docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
CD:
name: Deployment
runs-on: self-hosted
needs:
- CI
steps:
- name: Checkout
uses: actions/checkout@v2



- name: Configure AWS credentials
uses: aws-actions/configure-aws-credentials@v1
with:
aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
aws-region: ${{ secrets.AWS_REGION }}

- name: Login to Amazon ECR
id: login-ecr
uses: aws-actions/amazon-ecr-login@v1

- name: Setup kubeconfig
id: setup-kubeconfig
run: |
aws eks --region us-east-1 update-kubeconfig --name ${{ secrets.EKS_CLUSTER_NAME }}
- name: helm deploy
uses: koslib/helm-eks-action@master
env:
KUBE_CONFIG_DATA: ${{ secrets.KUBE_CONFIG_DATA }}
ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
ECR_REPOSITORY: ${{ secrets.REPO_NAME }}
IMAGE_TAG: dev-0.${{ github.run_number }}.0
cluster_name: ${{ secrets.EKS_CLUSTER_NAME }}
spring_datasource_url: ${{ secrets.DEV_SPRING_DATASOURCE_URL }}
spring_datasource_username: ${{ secrets.DEV_SPRING_DATASOURCE_USERNAME }}
spring_datasource_password: ${{ secrets.DEV_SPRING_DATASOURCE_PASSWORD }}
with:
command: helm upgrade --install release-name-deposits helm-jb-deposits-java/ --set image.tag=$IMAGE_TAG

- name: verify deployment
uses: kodermax/kubectl-aws-eks@master
env:
KUBE_CONFIG_DATA: ${{ secrets.KUBE_CONFIG_DATA }}
with:
args: rollout status deployment/deposits-java-deployment -n jewel-dev

QA:
name: QA-Deployment
runs-on: self-hosted
environment: QA



needs:
- CD
steps:
- name: Checkout
uses: actions/checkout@v2



- name: Assume Role
uses: youyo/awscredswrap@v1
with:
role_arn: arn:aws:iam::568728346833:role/dltjewel-developer
duration_seconds: 3600
role_session_name: 'JewelQA'
env:
AWS_ACCESS_KEY_ID: ${{ secrets.AWS_QA_ACCESS_KEY_ID }}
AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_QA_SECRET_ACCESS_KEY }}
AWS_DEFAULT_REGION: 'us-east-1'

- name: Login to Amazon ECR
id: login-ecr
uses: docker/login-action@v1
with:
registry: ${{ secrets.AWS_ECR_DEV_REPOSITORY }}

- name: Setup kubeconfig
id: setup-kubeconfig
run: |
aws eks --region us-east-1 update-kubeconfig --name ${{ secrets.EKS_QA_CLUSTER_NAME }}

- name: helm deploy
uses: koslib/helm-eks-action@master
env:
KUBE_CONFIG_DATA: ${{ secrets.KUBE_CONFIG_DATA_QA }}
ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
ECR_REPOSITORY: ${{ secrets.REPO_NAME }}
IMAGE_TAG: dev-0.${{ github.run_number }}.0
cluster_name: ${{ secrets.EKS_QA_CLUSTER_NAME }}
with:
command: helm upgrade --install qa-jb-deposits-java helm-jb-deposits-java/ --set image.tag=$IMAGE_TAG

- name: verify deployment
uses: kodermax/kubectl-aws-eks@master
env:
KUBE_CONFIG_DATA: ${{ secrets.KUBE_CONFIG_DATA_QA }}
with:
args: rollout status deployment/deposits-java-deployment -n jewel-dev
